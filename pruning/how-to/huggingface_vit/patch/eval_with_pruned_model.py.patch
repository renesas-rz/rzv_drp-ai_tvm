diff --git validate.py eval_with_pruned_model.py
old mode 100755
new mode 100644
index cb71a06..0789b98
--- validate.py
+++ eval_with_pruned_model.py
@@ -1,4 +1,40 @@
 #!/usr/bin/env python3
+#######################################################################################################################
+# DISCLAIMER
+# This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
+# other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
+# applicable laws, including copyright laws.
+# THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
+# THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
+# EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
+# SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO
+# THIS SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+# Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
+# this software. By using this software, you agree to the additional terms and conditions found by accessing the
+# following link:
+# http://www.renesas.com/disclaimer
+#
+# Copyright (C) 2024 Renesas Electronics Corporation. All rights reserved.
+#######################################################################################################################
+#######################################################################################################################
+#    Copyright 2019 Ross Wightman
+#
+#    Licensed under the Apache License, Version 2.0 (the "License");
+#    you may not use this file except in compliance with the License.
+#    You may obtain a copy of the License at
+#
+#        http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS,
+#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+#    See the License for the specific language governing permissions and
+#    limitations under the License.
+#######################################################################################################################
+# Description : Test vision transformer with pytorch format.
+# Version history:
+#   - Support the DRP-AI Extension Pack
 """ ImageNet Validation Script
 
 This is intended to be a lean and easily modifiable ImageNet validation script for evaluating pretrained
@@ -27,6 +63,11 @@ from timm.layers import apply_test_time_pool, set_fast_norm
 from timm.models import create_model, load_checkpoint, is_model, list_models
 from timm.utils import accuracy, AverageMeter, natural_key, setup_default_logging, set_jit_fuser, \
     decay_batch_step, check_batch_size_retry, ParseKwargs, reparameterize_model
+# Modified by Renesas
+# Import the DRP-AI Extension Pack module
+from drpai_compaction_tool.pytorch import make_pruning_layer_list, \
+                                          Pruner, \
+                                          get_model_info
 
 try:
     from apex import amp
@@ -51,6 +92,8 @@ has_compile = hasattr(torch, 'compile')
 
 _logger = logging.getLogger('validate')
 
+# Modified by Renesas
+MODEL_INPUT_SIZE = (5, 3, 224, 224)
 
 parser = argparse.ArgumentParser(description='PyTorch ImageNet Validation')
 parser.add_argument('data', nargs='?', metavar='DIR', const=None,
@@ -102,7 +145,8 @@ parser.add_argument('--std', type=float,  nargs='+', default=None, metavar='STD'
                     help='Override std deviation of of dataset')
 parser.add_argument('--interpolation', default='', type=str, metavar='NAME',
                     help='Image resize interpolation type (overrides model)')
-parser.add_argument('--num-classes', type=int, default=None,
+# Modified by Renesas
+parser.add_argument('--num-classes', type=int, default=1000,
                     help='Number classes in dataset')
 parser.add_argument('--gp', default=None, type=str, metavar='POOL',
                     help='Global pool type, one of (fast, avg, max, avgmax, avgmaxc). Model default if None.')
@@ -159,7 +203,9 @@ parser.add_argument('--valid-labels', default='', type=str, metavar='FILENAME',
                     help='Valid label indices txt file for validation of partial label space')
 parser.add_argument('--retry', default=False, action='store_true',
                     help='Enable batch size decay & retry for single model validation')
-
+# Modified by Renesas
+parser.add_argument('--is_pruned_weight', action='store_true',
+                    help='When testing the model with pruned weight, please specify this option')
 
 def validate(args):
     # might as well try to validate something
@@ -217,9 +263,25 @@ def validate(args):
         assert hasattr(model, 'num_classes'), 'Model must have `num_classes` attr if not set on cmd line/config.'
         args.num_classes = model.num_classes
 
+    # Modified by Renesas
+    input_size = [MODEL_INPUT_SIZE]
+    if args.is_pruned_weight:
+        # Preparing for pruning the model with a pruning rate of 0.0
+        pruning_layer_list = make_pruning_layer_list(model, 
+                                                     input_size=input_size)
+        print(f"pruning_layer_list = \n\t{pruning_layer_list}")
+        _ = Pruner(model, 
+                   pruning_layer_list=pruning_layer_list,
+                   final_pr=0.0)
+
     if args.checkpoint:
         load_checkpoint(model, args.checkpoint, args.use_ema)
 
+        # Modified by Renesas
+        if args.is_pruned_weight:
+            # Confirming the result of loading weights correctly
+            print(get_model_info(model, input_size=input_size))
+
     if args.reparam:
         model = reparameterize_model(model)
 
@@ -416,6 +478,8 @@ _NON_IN1K_FILTERS = ['*_in21k', '*_in22k', '*in12k', '*_dino', '*fcmae', '*seer'
 def main():
     setup_default_logging()
     args = parser.parse_args()
+    # Modified by Renesas
+    _validate_args(args)
     model_cfgs = []
     model_names = []
     if os.path.isdir(args.checkpoint):
@@ -492,6 +556,12 @@ def write_results(results_file, results, format='csv'):
             cf.flush()
 
 
+# Modified by Renesas
+def _validate_args(args):
+    if args.model not in ["vit_base_patch16_224.orig_in21k"]:
+        raise NotImplementedError(f"This script does not support {args.model}.")
+    if args.num_classes != 1000:
+        raise NotImplementedError(f"This script does not support {args.num_classes=}. Only supports --num-classes=1000.")
 
 if __name__ == '__main__':
     main()
